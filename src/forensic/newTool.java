/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forensic;


import java.io.File;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Rajat Bajpai
 */
public class newTool extends javax.swing.JFrame {
    String filename;
    File file;
    int offset = 16;
    int noEntry = 0;
    String volumeType ;
    int[] part = new int[20];
    int[] vol = new int[32];
    int slba[]=new int[5];
    int count=0;
    int cluster2sa;
    int csa;
    String dfiledata="";
    

    /**
     * Creates new form newTool
     */
    public newTool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msgarea = new javax.swing.JTextArea();
        attach = new javax.swing.JButton();
        analyze = new javax.swing.JButton();
        filearea = new javax.swing.JTextField();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DATA FORENSIC TOOL");
        setBackground(new java.awt.Color(255, 255, 0));

        msgarea.setColumns(20);
        msgarea.setRows(5);
        jScrollPane1.setViewportView(msgarea);

        attach.setBackground(new java.awt.Color(204, 204, 255));
        attach.setText("Attach");
        attach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachActionPerformed(evt);
            }
        });

        analyze.setBackground(new java.awt.Color(204, 204, 255));
        analyze.setText(" Analyze Disk Image");
        analyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeActionPerformed(evt);
            }
        });

        filearea.setBackground(new java.awt.Color(204, 255, 204));
        filearea.setText("file to be attached");

        reset.setBackground(new java.awt.Color(255, 153, 153));
        reset.setText("!! RESET !!");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(filearea, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attach, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyze)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(reset))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filearea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attach)
                    .addComponent(analyze)
                    .addComponent(reset))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void attachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachActionPerformed
        // TODO add your handling code here:
        
        JFileChooser chooser = new JFileChooser();// create object of JFileChooser
        chooser.showOpenDialog(null);// choose which file you want to select from locations
        file = chooser.getSelectedFile();// assign the file equal to file
        filename = file.getAbsolutePath();
        String tempfile=file.getName();//Get the name of the file and assign it to filename
        filearea.setText(tempfile+"\tFile Attached");//Display the filename in the Text field
    }//GEN-LAST:event_attachActionPerformed

    private void analyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeActionPerformed
        // TODO add your handling code here:
      //  partitio[] part = new partition[4];
        try{
            int ch;
           // create a new RandomAccessFile with filename test
        RandomAccessFile raf = new RandomAccessFile(filename, "r");
           // set the file pointer at 0 position
       for (int i=0;i<=3 ;i++ ) {
           for(int j=0;j<=15;j++){
             raf.seek(0x1BE+(i*16)+j);
             part[j] = (raf.read());
             //System.out.print(partitionTable[i]);
           }
           
           msgarea.append("\n\n****************INFORMATION OF PARTITION Number "+(i+1)+"*****************\n");
           showdata();

        }
           msgarea.append("\n\n****************VOLUME ANALYSIS OF PARTITION 1-FAT 16*****************\n");
           showVolume();
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_analyzeActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        msgarea.setText("");
        filearea.setText("file to be attached");
    }//GEN-LAST:event_resetActionPerformed
    
    public void convert(int Data[], int max_index){
        int[] temp = new int[max_index+1];
        for(int i =0; i<=max_index; i++){
            temp[i]=Data[i];
        }
        for(int i=0,j=max_index; i<=max_index;i++,j--){
            Data[i]=temp[j];
        }
    }
    
    public String check(int s)
    {
        if (s==0)
            return "EMPTY";
        if(s==1)
            return "12-bit FAT";
        if (s==4)
            return"16-bit FAT< 32mb";
        if(s==5)
            return"EXTENDED MS-DOS";
        if (s==6)
            return"FAT 16, 32mb to 2gb";
        if(s==7)
            return"NTFS";
        if(s==11)
            return"fat 32 chs";
        if(s==12)
            return"fat 32 LBA";
        if(s==14)
            return"fat 16 LBA";
        else
            return"Not Known";
              
    }
    public void showdata(){
        int k=0;
        String flag;
        int fbyte;
        String fsys;
        int val4;
        int beginaddrs[]=new int[3];
        int[] endaddrs=new int[3];
        int[] startlba=new int[4];
        int[] sizeP = new int[4];
        
        if(part[k++]==0)
            flag="INACTIVE";
        else
            flag= "ACTIVE";
        msgarea.append("\n BOOTABLE PARTITION :\t"+flag+"\n");

        // CHS Begining address
        for(int a = 0; a < 3; a++)
        beginaddrs[a] = part[k++];
	convert(beginaddrs, 2);//little endian to big endian
        String sample=Integer.toHexString(beginaddrs[0])+Integer.toHexString(beginaddrs[1])+Integer.toHexString(beginaddrs[2]);
        msgarea.append("BEGNING C.H.S Address : \t0x"+sample);  
       // msgarea.append("\t("+Integer.parseInt(sample)+")");
        int val1=Integer.parseInt(sample, 16);
        msgarea.append("\t ("+val1+")");
        
        //File partition type
        fbyte = part[k++];
        String hexsys=Integer.toHexString(fbyte);
        fsys=check(fbyte);
        msgarea.append("\n TYPE OF PARTITION IS: \t "+fsys);
        int val2=Integer.parseInt(hexsys,16);
        msgarea.append("\t ("+val2+")");
        
        //Ending CHS address
        for(int a = 0; a < 3 ; a++)
        endaddrs[a] = part[k++];
	convert(endaddrs,2);
        String samp=Integer.toHexString(endaddrs[0])+Integer.toHexString(endaddrs[1])+Integer.toHexString(endaddrs[2]);
        msgarea.append("\nENDING C.H.S Address : \t0x"+samp);
         int val3 = Integer.parseInt(samp,16);
         msgarea.append("\t("+val3+")");
        
         //Starting LBA address
        for(int a = 0; a< 4; a++)
	startlba[a] = part[k++];
	convert(startlba,3);
        String sample1 = Integer.toHexString(startlba[0])+Integer.toHexString(startlba[1])+Integer.toHexString(startlba[2])+Integer.toHexString(startlba[3]);
        msgarea.append("\nSTARTING OF LBA Address : \t0x"+sample1);      
       // msgarea.append("\t("+Integer.parseInt(sample1)+")");
        val4= Integer.parseInt(sample1,16);
        slba[count++]=val4;
       msgarea.append("\t("+val4+")");
       
        //Size of partiton
        for(int a = 0; a< 4; a++)
            sizeP[a] = part[k++];
	convert(sizeP,3);
        String sample3=Integer.toHexString(sizeP[0])+Integer.toHexString(sizeP[1])+Integer.toHexString(sizeP[2])+Integer.toHexString(sizeP[3]);
        msgarea.append("\nSize of partition in sectors: \t0x"+sample3);   
        int val5 = Integer.parseInt(sample3,16);
        msgarea.append("\t("+val5+")");  
    }
    
        public void showVolume(){
        int h=0;
        
        int jump[]=new int[3];
        int oem[]=new int[8];
        int bytePerSec[]= new int[2];
        int sectorPerCluster;
        int[] reservedAreaSize=new int[3];
        int fatCopy;
        int[] root= new int[3];
        int[] sectorInPart= new int[3];
        int mediaType;
        int[] sizeofFat=new int[3];
        int[] sectorPerTrack= new int[3];
        int[] noOfHead=new int[3];
        try{
        RandomAccessFile raf2 = new RandomAccessFile(filename, "r");
        for(int i=0;i<32;i++){
            raf2.seek(0x7E00+i);
            vol[i]=raf2.read();
        }
        }catch(Exception e){}
 
        
       // System.out.println("Size of Reserved AREA in sectors : \t");
       for(int a = 0; a < 3; a++)
            jump[a] = vol[h++];
        
        for(int a = 0; a < 8; a++)
            oem[a]=vol[h++];
            
        for(int a = 0; a < 2; a++)
             bytePerSec[a]=vol[h++];
        
        sectorPerCluster=vol[h++];
        String spc=Integer.toHexString(sectorPerCluster);
        int spc2=Integer.parseInt(spc,16);
        msgarea.append("\nNo. of Sectors Per Cluster : \t0x"+spc+"\t("+spc2+")");
        
        for(int a = 0; a < 2; a++)
            reservedAreaSize[a]=vol[h++];    
        convert(reservedAreaSize, 1);
        String rs=Integer.toHexString(reservedAreaSize[0])+Integer.toHexString(reservedAreaSize[1]);
        msgarea.append("\nReserved Area in Sectors : \t0x"+rs);
        int rs2=Integer.parseInt(rs,16);
        msgarea.append("\t("+rs2+")");
        
        fatCopy = vol[h++];
        String fc=Integer.toHexString(fatCopy);
        int fc2=Integer.parseInt(fc,16);
        msgarea.append("\n Number Of FAT copies :\t0x"+fc+"\t("+fc2+")");
       // String smp="0";
        for(int a = 0; a < 2; a++)
            root[a]=vol[h++];
      
        convert(root, 1);
        String rd=Integer.toHexString(root[0])+"0"+Integer.toHexString(root[1]);
       msgarea.append("\nMax no. of ROOT Directories : \t0x"+rd);      
        int rd2=Integer.parseInt(rd,16);;
        msgarea.append("\t("+rd2+")");
        //directory entry size for FAT VOLUME is 32 bytes and no of bytes in sectors = 512 bytes
        int rootDirSize=(rd2*32)/512; // in sectors
        msgarea.append("\n ROOT Directory size In SECTORS : \t"+rootDirSize);

        for(int a = 0; a < 2; a++)
            sectorInPart[a]=vol[h++];
        
        mediaType=vol[h++];
        
        for(int a = 0; a < 2; a++)
            sizeofFat[a]=vol[h++];
        convert(sizeofFat, 1);
        String sf=Integer.toHexString(sizeofFat[0])+Integer.toHexString(sizeofFat[1]);
        msgarea.append("\nSize of FAT in Sectors : \t0x"+sf);
        int sf2=Integer.parseInt(sf,16);
        msgarea.append("\t("+sf2+")");
        int totalFatArea= sf2*fc2;
        msgarea.append("\nTotal FAT Area in Sectors : \t\t"+totalFatArea);
        int da=slba[0]+rs2+totalFatArea;
        msgarea.append("\n1st Sector Of DATA address:\t\t"+da);
        cluster2sa=da+rootDirSize;
        msgarea.append("\nSector Address of cluster#2:\t\t"+cluster2sa);
        showDelete();
          
    }
        
    public void showDelete(){
    int[] temp3=new int[512];    
    int dltfile[]=new int[34];
    try{
        RandomAccessFile raf2 = new RandomAccessFile(filename, "r");
        for(int i=0;i<512;i++){
            raf2.seek(0x46E00+i);
            temp3[i]=raf2.read();
        }
        }catch(Exception e){}
   // String dltfile;
   String smp="";
    int ind=0;

    for(int i=0; i<512; i=i+32){
       //  smp=Integer.toHexString(temp3[i]);
         if(temp3[i] == 229)// checking every 32 byte in 567 sector for e5
         {  ind=i;
             msgarea.append("\nDeleted file directory entry\t"+temp3[i]+"\t"+ind);
             for(int j=ind,a=0;j<ind+32;j++,a++)
             {
                 dltfile[a]=temp3[j];
             }
             for(int b=0;b<11;b++)
                 smp=smp+Integer.toHexString(dltfile[b]);
             byte[] bytes = DatatypeConverter.parseHexBinary(smp);
             String dfile= new String(bytes,StandardCharsets.UTF_8);
             msgarea.append("\nDeleted file Name is :\t"+dfile);
             
             String startclusterofdfile=Integer.toHexString(dltfile[27])+Integer.toHexString(dltfile[26]);
             int startcluster=Integer.parseInt(startclusterofdfile,16);
             msgarea.append("\nDeleted file Starting cluster No. :\t"+startclusterofdfile+"\t"+startcluster);
             
             String dltfilesize=Integer.toHexString(dltfile[31])+Integer.toHexString(dltfile[30])+Integer.toHexString(dltfile[29])+Integer.toHexString(dltfile[28]);
             int size=Integer.parseInt(dltfilesize,16);
             msgarea.append("\nDeleted file Size. :\t"+dltfilesize+"\t"+size);
             
             /*
             CSA = (sector address for Cluster #2) + ( (cluster number – 2) * 8 )
                    = 599 + (( 19 – 2 ) * 8)
                    = 599 + 136
                    = 735
             */
             
             csa=cluster2sa + ((startcluster-2)*8);
             msgarea.append("\nCluster Sector Address :\t"+csa);
            // int n = csa*512;
             showFileData();
         }
         
        }
    }
    
        public void showFileData(){
       
        String fdata="";
        int[] data = new int[101];

        try{
        RandomAccessFile raf3 = new RandomAccessFile(filename,"r");
        for(int i =0;i<=100;i++){
        raf3.seek((csa*512l)+i); 
        data[i]=raf3.read(); 
        fdata=fdata+Integer.toHexString(data[i]);
        }   
        }catch(Exception e){
            e.printStackTrace();
        }
        byte[] bytes = DatatypeConverter.parseHexBinary(fdata);
        String dfiledata= new String(bytes,StandardCharsets.UTF_8);
        msgarea.append(dfiledata);
        NTFS();
       // msgarea.append(dfiledata);       
    }
        
    public void NTFS(){
        
       int[] BytePerSector = new int[2];
        try {
            RandomAccessFile raf4 = new RandomAccessFile(filename,"r");
            raf4.seek((1606500*512l)+11);
            BytePerSector[1]=raf4.read();
            raf4.seek((1606500*512l)+12);
            BytePerSector[0]=raf4.read();
            String s= Integer.toHexString(BytePerSector[0])+Integer.toHexString(BytePerSector[1]);
            int sVal= Integer.parseInt(s,16);
           // convert(BytePerSector,1);
           msgarea.append("\n\n***********NTFS Volume analysis**************\n");
           msgarea.append("\nBytes per sector : \t0x"+s+"\t"+sVal);
           
           raf4.seek((1606500*512l)+13);
           int sectorPerCluster= raf4.read();
           String s2=Integer.toHexString(sectorPerCluster);
           int s2val=Integer.parseInt(s2,16);
           msgarea.append("\nSector Per cluster : \t0x"+s2+"\t"+s2val);
           
           raf4.seek((1606500*512l)+0x30);
           int logicalCLuster=raf4.read();
           int sectorAddress= logicalCLuster*s2val;
            msgarea.append("\n Logical cluster: \t \t"+logicalCLuster);
           msgarea.append("\n Sector address for $MFT record: \t"+sectorAddress);
           
          // long l=(long) sectorAddress;
           int start1at[]=new int[2];
           raf4.seek(((1606500+sectorAddress)*512l)+0x14);
           start1at[0]=raf4.read();
           raf4.seek(((1606500+sectorAddress)*512l)+0x15);
           start1at[1]=raf4.read();
           String sa=Integer.toHexString(start1at[1])+Integer.toHexString(start1at[0]);
           int saval=Integer.parseInt(sa);
          // System.out.println("38 value  "+sa+saval);
           
           
           long len=0;
         for(int k=0; k<2;k++){  
           int at[]=new int[4];
           for(int i=0 ;i<4;i++){
               raf4.seek((1606532*512l)+0x38+i+len) ;
               at[i]=raf4.read();
           }
           String s3= Integer.toHexString(at[3])+Integer.toHexString(at[2])+Integer.toHexString(at[1])+Integer.toHexString(at[0]);
           int s3val=Integer.parseInt(s3,16);
           msgarea.append("\n Type of attribute value is:\t\t "+s3val);
           String c=checkattribute(s3val);
            msgarea.append("\n Type of attribute is:\t\t "+c);
           
           int atlen[]=new int[4];
            for(int i=4,j=0 ;i<8;i++,j++){
               raf4.seek((1606532*512l)+0x38+i+len) ;
               atlen[j]=raf4.read();
           }
           String s4= Integer.toHexString(atlen[3])+Integer.toHexString(atlen[2])+Integer.toHexString(atlen[1])+Integer.toHexString(atlen[0]); 
           int s4val=Integer.parseInt(s4,16);
           msgarea.append("\n Length of attribute :\t\t"+s4val);
          len = s4val;
         }
           
        } catch (Exception ex) {
            Logger.getLogger(newTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public String checkattribute(int n){
        if(n==16)
            return("$Standard_information");
        if(n==32)
             return("$ATTRIBUTE_LIST");
        if(n==48)
             return("$FILE_NAME");
        else
            return("unknown");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyze;
    private javax.swing.JButton attach;
    private javax.swing.JTextField filearea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msgarea;
    private javax.swing.JButton reset;
    // End of variables declaration//GEN-END:variables
}
